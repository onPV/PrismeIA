# backend/Dockerfile.prod

# --- 1. Stage de build pour les dépendances Composer ---
FROM composer:2 as composer_builder
WORKDIR /app
COPY composer.json composer.lock ./
# Installe uniquement les dépendances de production et optimise l'autoloader
RUN composer install --no-dev --no-scripts --optimize-autoloader

# --- 2. Stage de build pour l'application finale ---
FROM php:8.2-fpm-alpine as app

# Installe les dépendances système et les extensions PHP nécessaires pour Symfony et PostgreSQL
RUN apk add --no-cache \
    nginx \
    supervisor \
    libzip-dev \
    postgresql-dev \
    icu-dev

RUN docker-php-ext-install pdo pdo_pgsql zip intl opcache

# Crée le répertoire de l'application
WORKDIR /var/www/html

# Copie les dépendances Composer depuis le stage de build
COPY --from=composer_builder /app/vendor/ ./vendor/

# Copie le code de l'application
COPY . .

# Copie la configuration Nginx de production
COPY docker/prod/nginx.conf /etc/nginx/nginx.conf

# !! NOUVELLE LIGNE !!
# Copie la configuration PHP-FPM pour s'assurer que les variables d'environnement sont passées
COPY docker/prod/php-fpm-pool.conf /usr/local/etc/php-fpm.d/zz-docker.conf

# Nettoie les fichiers de configuration par défaut de Nginx
RUN rm -rf /etc/nginx/http.d/default.conf

# Assure les bonnes permissions pour les logs et le cache
RUN mkdir -p var/cache var/log \
    && chown -R www-data:www-data var \
    && chmod -R 775 var

# Expose le port 80 pour Nginx
EXPOSE 80

# Commande pour démarrer Nginx et PHP-FPM via Supervisor
# CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
CMD [ "printenv" ]

# ---- Configuration pour Supervisor (gestion des processus) ----
RUN echo '[supervisord]' > /etc/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisord.conf && \
    echo '[program:php-fpm]' >> /etc/supervisord.conf && \
    echo 'command=/usr/local/sbin/php-fpm -F' >> /etc/supervisord.conf && \
    echo '[program:nginx]' >> /etc/supervisord.conf && \
    echo 'command=/usr/sbin/nginx -g "daemon off;"' >> /etc/supervisord.conf