# backend/Dockerfile.prod (VERSION FINALE ET NETTOYÉE)

# --- 1. Stage de build pour les dépendances Composer ---
FROM composer:2 as composer_builder
WORKDIR /app
COPY composer.json composer.lock ./
# Installe uniquement les dépendances de production et optimise l'autoloader
RUN composer install --no-dev --no-scripts --optimize-autoloader

# --- 2. Stage de build pour l'application finale ---
FROM php:8.2-fpm-alpine as app

# Installe Nginx et les extensions PHP (sans supervisor)
RUN apk add --no-cache \
    nginx \
    libzip-dev \
    postgresql-dev \
    icu-dev

RUN docker-php-ext-install pdo pdo_pgsql zip intl opcache

# Crée le répertoire de l'application
WORKDIR /var/www/html

# Copie les dépendances et le code
COPY --from=composer_builder /app/vendor/ ./vendor/
COPY . .

# Copie les configurations
COPY docker/prod/nginx.conf /etc/nginx/nginx.conf
COPY docker/prod/php-fpm-pool.conf /usr/local/etc/php-fpm.d/zz-docker.conf
RUN rm -rf /etc/nginx/http.d/default.conf

# Copie le script de démarrage et le rend exécutable
COPY entrypoint.sh .
RUN chmod +x entrypoint.sh

# Assure les bonnes permissions
RUN mkdir -p var/cache var/log \
    && chown -R www-data:www-data var \
    && chmod -R 775 var

EXPOSE 80

# La commande de démarrage via notre script
CMD ["./entrypoint.sh"]