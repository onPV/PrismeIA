# render.yaml
# Blueprint pour l'infrastructure PrismeIA sur Render

services:
  # Service Backend (Symfony API)
  - type: web
    name: prismeia-backend-staging
    runtime: docker
    repo: https://github.com/onPV/PrismeIA # Assurez-vous que c'est le bon repo
    region: frankfurt
    branch: main
    rootDir: backend
    dockerfilePath: ./Dockerfile.prod
    healthCheckPath: /healthz # Utilise votre route de health check
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: prismeia-db-staging # Le nom de votre service BDD
          property: internalUrl
      - key: APP_ENV
        value: prod
      - key: APP_DEBUG
        value: 0
      - fromGroup: prismeia-secrets # On va créer ce groupe pour les secrets

  # Service Frontend (Next.js)
  - type: web
    name: prismeia-frontend-staging
    runtime: node
    repo: https://github.com/onPV/PrismeIA # Assurez-vous que c'est le bon repo
    region: frankfurt
    branch: main
    rootDir: frontend
    buildCommand: "npm install && npm run build"
    startCommand: "npm start"

# Groupe de variables d'environnement secrètes
envVarGroups:
  - name: prismeia-secrets
    envVars:
      - key: APP_SECRET
        generateValue: true # Render génère un secret sécurisé
      - key: MAILER_DSN
        value: "votre_dsn_mailer_de_production" # Mettez votre DSN de SendGrid/etc.
      - key: JWT_PASSPHRASE
        value: "LemotdepassePrismeia2025" # Mettez votre passphrase
      - key: JWT_SECRET_KEY
        value: |
          -----BEGIN ENCRYPTED PRIVATE KEY-----
           collez votre clé privée ici 
          -----END ENCRYPTED PRIVATE KEY-----
      - key: JWT_PUBLIC_KEY
        value: |
          -----BEGIN PUBLIC KEY-----
           collez votre clé publique ici 
          -----END PUBLIC KEY-----

# Service Base de Données (PostgreSQL)
databases:
  - name: prismeia-db-staging
    region: frankfurt
