server {
    listen 80;
    server_name localhost;

    # Définir le répertoire racine pour PHP (le dossier public de Symfony dans le conteneur)
    # C'est important pour le SCRIPT_FILENAME de FastCGI
    root /var/www/html/public;

    # 1. Gérer les requêtes pour l'API Symfony
    # Toutes les requêtes commençant par /api/ seront directement passées à PHP-FPM.
    location /api/ {
        # Passe la requête au processus PHP-FPM
        fastcgi_pass php:9000; # 'php' est le nom du service PHP dans docker-compose.yml

        # Sépare le chemin en script PHP et PATH_INFO
        fastcgi_split_path_info ^(.+\.php)(/.*)$;

        # Définit le chemin du script PHP à exécuter (toujours index.php pour Symfony)
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param DOCUMENT_ROOT $realpath_root; # Définit le DOCUMENT_ROOT réel

        # Passe le PATH_INFO à Symfony (le chemin après index.php)
        fastcgi_param PATH_INFO $fastcgi_path_info;

        # Inclut les paramètres FastCGI par défaut
        include fastcgi_params;

        # S'assurer que Symfony reçoit le chemin original complet pour le routage
        fastcgi_param REQUEST_URI $request_uri;

        # Augmente les tailles de buffer pour les réponses plus grandes
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
    }

    # 2. Gérer toutes les autres requêtes (pour le frontend Next.js)
    # Si une requête n'est pas une API, elle est envoyée au serveur de dev Next.js.
    location / {
        proxy_pass http://frontend_dev:3000; # Proxy vers le serveur de développement Next.js
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}